{"version":3,"names":[],"mappings":"","sources":["focuscontroller.js"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) {\r\n    for (var i = 0; i < props.length; i++) {\r\n        var descriptor = props[i];\r\n        descriptor.enumerable = descriptor.enumerable || false;\r\n        descriptor.configurable = true;\r\n        if (\"value\" in descriptor) descriptor.writable = true;\r\n        Object.defineProperty(target, descriptor.key, descriptor);\r\n    }\r\n}\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nif (window.NodeList && !NodeList.prototype.forEach) {\r\n    NodeList.prototype.forEach = Array.prototype.forEach;\r\n}\r\n\r\nvar FocusController = /*#__PURE__*/ function() {\r\n    \"use strict\";\r\n\r\n    function FocusController() {\r\n        _classCallCheck(this, FocusController);\r\n\r\n        this.mouseDown = false;\r\n        this.prevElementFocus = null;\r\n        this.blockClass = \"has-dropdown\";\r\n        this.arrBlockClass = [\"js-nearest-store-toggle\"];\r\n        this.currentBlock = null;\r\n        this.currentBlockLastChild = null;\r\n        this.currentBlockFirstChild = null;\r\n        this.tempEval = null;\r\n    }\r\n\r\n    _createClass(FocusController, [{\r\n        key: \"detectJsElements\",\r\n        value: function detectJsElements(container) {\r\n            /*\r\n            var _this = this;\r\n\r\n            console.log(\"-- detectJsElements\");\r\n            var jsClasses = \"js-\";\r\n            var elmts = document.querySelectorAll(container);\r\n            elmts.forEach(function(el) {\r\n                el.addEventListener('mousedown', function(event) {\r\n                    _this.mouseDown = true;\r\n\r\n                    if (el == _this.prevElementFocus) {\r\n                        el.blur();\r\n                    }\r\n                });\r\n                el.addEventListener('mouseup', function(event) {\r\n                    _this.prevElementFocus = el;\r\n                    _this.mouseDown = false;\r\n\r\n                    if (el == _this.prevElementFocus) {\r\n                        el.blur();\r\n                    }\r\n                });\r\n                el.addEventListener('focus', function(event) {\r\n                    if (_this.mouseDown) {\r\n                        event.target.blur();\r\n                    }\r\n                });\r\n                el.addEventListener('click', _this.handleClick.bind(_this));\r\n            });\r\n            */\r\n            document.addEventListener('keydown', this.handleKeyDown.bind(this));\r\n            document.addEventListener('keyup', this.handleKeyUp.bind(this));\r\n        }\r\n    }, {\r\n        key: \"initBlockFocus\",\r\n        value: function initBlockFocus(el, currentBlock) {\r\n            console.log(\"-- initBlockFocus\");\r\n            var parent = el.parentNode == undefined ? jQuery(el).parent() : el.parentNode;\r\n\r\n            if (!jQuery(parent).hasClass('block-active')) {\r\n                //jQuery(parent).addClass('block-active');\r\n                this.currentBlock = currentBlock == undefined ? parent : currentBlock;\r\n                var childList = jQuery(parent).find(\"select,input,a,button\");\r\n                var lastChild = childList[childList.length - 1];\r\n                this.currentBlockLastChild = lastChild;\r\n                this.currentBlockFirstChild = null;\r\n                var temp_ = \"\";\r\n                jQuery(childList).each(function(index, item) {\r\n                    if (jQuery(el)[0] != jQuery(item)[0] && temp_ == \"\") {\r\n                        temp_ = item;\r\n                    }\r\n                });\r\n                this.currentBlockFirstChild = temp_; //jQuery(this.currentBlockFirstChild).tabIndex = 0;\r\n                //jQuery(this.currentBlockFirstChild).attr('tabindex', 0);\r\n\r\n                jQuery(this.currentBlockFirstChild).trigger(\"focus\");\r\n            }\r\n        }\r\n    }, {\r\n        key: \"loadCurrentBlock\",\r\n        value: function loadCurrentBlock() {}\r\n    }, {\r\n        key: \"clearCurrenBlock\",\r\n        value: function clearCurrenBlock() {\r\n            this.currentBlockFirstChild = null;\r\n            this.currentBlockLastChild = null;\r\n            this.currentBlock = null;\r\n        }\r\n    }, {\r\n        key: \"handleClick\",\r\n        value: function handleClick(event) {\r\n            console.log(\"-- handleClick\");\r\n            var el = event.currentTarget;\r\n\r\n            this.processAction(el);\r\n            //jQuery(el).parent()[0].blur();\r\n            el.blur(); //console.log(el.classList);\r\n        }\r\n    }, {\r\n        key: \"handleKeyDown\",\r\n        value: function handleKeyDown(event) {\r\n            console.log(\"-- handleKeyDown\");\r\n            var code = event.keyCode ? event.keyCode : event.which;\r\n\r\n            if (code == 9) {\r\n                if (jQuery(\".block-active\").length) {\r\n                    var el = document.activeElement;\r\n                    this.handleBlockTabs(event, el);\r\n                }\r\n            }\r\n\r\n            if (code == 9 && this.prevElementFocus != null) { // tab pressed \r\n                //this.prevElementFocus.focus();\r\n                //this.prevElementFocus = null;\r\n            }\r\n        }\r\n    }, {\r\n        key: \"handleKeyUp\",\r\n        value: function handleKeyUp(event) {\r\n            console.log(\"-- handleKeyUp\");\r\n            var code = event.keyCode ? event.keyCode : event.which;\r\n\r\n            if (code == 9 && jQuery(\".block-active\").length == 0) { // tab pressed\r\n                //this.prevElementFocus = document.activeElement;\r\n                //let el = event.currentTarget;\r\n            }\r\n\r\n            if (code == 13) {\r\n                // enter pressed\r\n                var el = document.activeElement; //console.log(el);\r\n\r\n                this.processAction(el);\r\n            }\r\n\r\n            if (code === 27) {\r\n                //ESCAPE button pressed\r\n                this.processCancel();\r\n            }\r\n        }\r\n    }, {\r\n        key: \"handleBlockTabs\",\r\n        value: function handleBlockTabs(event, el) {\r\n            console.log(\"-- handleBlockTabs\"); //console.log(event);\r\n\r\n            var target = jQuery(event.target);\r\n            this.tempEval = target;\r\n\r\n            if (event.shiftKey) {\r\n                if (target[0] == this.currentBlockFirstChild) {\r\n                    event.preventDefault();\r\n                    this.currentBlockLastChild.focus(); //this.currentBlockFirstChild.focus();\r\n                }\r\n            }\r\n\r\n            if (jQuery(this.currentBlock).find(target).length == 0) {\r\n                event.preventDefault();\r\n                this.currentBlockFirstChild.focus();\r\n            }\r\n\r\n            if (el == this.currentBlockLastChild) {\r\n                if (!event.shiftKey) {\r\n                    //console.log(\"-- go to first\");\r\n                    event.preventDefault();\r\n                    this.currentBlockFirstChild.focus();\r\n                }\r\n            }\r\n        }\r\n    }, {\r\n        key: \"processAction\",\r\n        value: function processAction(el) {\r\n            var _this2 = this;\r\n\r\n            console.log(\"-- processAction\");\r\n\r\n            if (!jQuery(el).parent().hasClass('block-active')) {\r\n                if (el.classList.contains(this.blockClass)) {\r\n                    this.initBlockFocus(el);\r\n                }\r\n\r\n                this.arrBlockClass.forEach(function(itemClass) {\r\n                    if (el.classList.contains(itemClass)) {\r\n                        _this2.initBlockFocus(el);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }, {\r\n        key: \"processCancel\",\r\n        value: function processCancel() {\r\n            console.log(\"-- processCancel\");\r\n\r\n            if (this.currentBlock != null) {\r\n                var parent = jQuery(this.currentBlock).parent();\r\n                console.log(parent); //document.activeElement.blur();\r\n\r\n                if (jQuery('.is-open').length) {\r\n                    console.log(\"is-open\");\r\n                    var container = jQuery('.is-open');\r\n                    console.log(container);\r\n                    var closeButton = container.find(\"[class$=__close],.js-nearest-store-close\");\r\n                    console.log(closeButton);\r\n\r\n                    if (closeButton.length != 0) {\r\n                        closeButton.trigger('click');\r\n                    } else {\r\n                        parent.find('.is-open').removeClass('is-open');\r\n                        parent.find('.is-active').removeClass('is-active');\r\n                        parent.find('.block-active').removeClass('block-active');\r\n                    }\r\n                } //this.clearCurrenBlock();\r\n\r\n            }\r\n        }\r\n    }, {\r\n        key: \"processShowModal\",\r\n        value: function processShowModal(el) {\r\n            console.log(\"-- processShowModal\");\r\n            var modal = jQuery('.is-open');\r\n\r\n            if (el == null) {\r\n                previousActiveElement = document.activeElement;\r\n            } else {\r\n                previousActiveElement = el;\r\n            }\r\n\r\n            jQuery(\"body > *\").each(function(index, value) {\r\n                if (value !== modal[0]) {\r\n                    value.inert = true;\r\n                }\r\n            });\r\n        }\r\n    }, {\r\n        key: \"processCloseModal\",\r\n        value: function processCloseModal() {\r\n            console.log(\"-- processCloseModal\");\r\n            var modal = jQuery('.is-open');\r\n            jQuery(\"body > *\").each(function(index, value) {\r\n                if (value !== modal[0]) {\r\n                    value.inert = false;\r\n                }\r\n            });\r\n            jQuery(modal).removeClass('is-open');\r\n            jQuery(this.prevElementFocus).focus();\r\n        }\r\n    }]);\r\n\r\n    return FocusController;\r\n}();"],"file":"focuscontroller.js"}